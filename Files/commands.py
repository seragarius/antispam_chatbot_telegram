import telepot
from utils import get_violations, update_violations, reset_violations, decrement_violations, get_username, \
    add_curse_word, load_curse_words, can_report, logging, user_last_reports, muted_users, get_chat_title
from checks import is_admin, timeout_stages, is_user_muted
import time


def handle_ban_command(bot, msg, chat_id, user_id):
    chat_title = get_chat_title(bot, chat_id)
    if is_admin(bot, chat_id, user_id):
        if 'reply_to_message' in msg:
            reply_message = msg['reply_to_message']
            user_to_ban_id = reply_message['from']['id']

            if user_to_ban_id == bot.getMe()['id']:
                bot.sendMessage(chat_id, "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç–∏ –±–æ—Ç–∞!", reply_to_message_id=msg['message_id'])
                return
            if is_admin(bot, chat_id, user_to_ban_id):
                bot.sendMessage(chat_id, "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
                                reply_to_message_id=msg['message_id'])
                return

            user_to_ban_username = get_username(reply_message)
            try:
                bot.kickChatMember(chat_id, user_to_ban_id)
                bot.sendMessage(chat_id, f"üö´ [{user_to_ban_username}](tg://user?id={user_to_ban_id}) –±—É–≤ –∑–∞–±–∞–Ω–µ–Ω–∏–π!",
                                parse_mode='Markdown')
                reset_violations(user_to_ban_id)
                if user_to_ban_id in muted_users:
                    del muted_users[user_to_ban_id]  # –í–∏–¥–∞–ª—è—î–º–æ –∑ muted_users –ø—Ä–∏ –±–∞–Ω–Ω—ñ
                logging.info(
                    "Ban: User banned",
                    extra={
                        'chat_id': chat_id,
                        'chat_title': chat_title,
                        'user_id': user_to_ban_id,
                        'username': user_to_ban_username,
                        'details': f"Message: {reply_message.get('text', 'N/A')}"
                    }
                )
            except Exception as e:
                print(f"Error banning user: {e}")
                bot.sendMessage(chat_id, "–£ –º–µ–Ω–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –±–∞–Ω —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
                                reply_to_message_id=msg['message_id'])
        else:
            bot.sendMessage(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –π–æ–≥–æ.",
                            reply_to_message_id=msg['message_id'])
    else:
        bot.deleteMessage((chat_id, msg['message_id']))


def handle_mute_command(bot, msg, chat_id, user_id):
    chat_title = get_chat_title(bot, chat_id)
    if is_admin(bot, chat_id, user_id):
        if 'reply_to_message' in msg:
            reply_message = msg['reply_to_message']
            user_to_mute_id = reply_message['from']['id']

            if user_to_mute_id == bot.getMe()['id']:
                bot.sendMessage(chat_id, "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–æ –±–æ—Ç–∞!",
                                reply_to_message_id=msg['message_id'])
                return
            if is_admin(bot, chat_id, user_to_mute_id):
                bot.sendMessage(chat_id, "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
                                reply_to_message_id=msg['message_id'])
                return

            user_to_mute_username = get_username(reply_message)
            restrict_info = bot.getChatMember(chat_id, user_to_mute_id)

            if restrict_info['status'] in ['member', 'administrator', 'creator']:
                violations = get_violations(user_to_mute_id)
                update_violations(user_to_mute_id)
                timeout = timeout_stages[violations] if violations < len(timeout_stages) else timeout_stages[-1]

                bot.restrictChatMember(
                    chat_id, user_to_mute_id,
                    until_date=int(time.time()) + timeout,
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False
                )
                muted_users[user_to_mute_id] = {'chat_id': chat_id,
                                                'until_date': int(time.time()) + timeout}  # –î–æ–¥–∞—î–º–æ –¥–æ muted_users
                bot.sendMessage(chat_id,
                                f"üîá [{user_to_mute_username}](tg://user?id={user_to_mute_id}) –æ—Ç—Ä–∏–º–∞–≤ —Ç–∞–π–º–∞—É—Ç –Ω–∞ {timeout // 3600} –≥–æ–¥–∏–Ω!",
                                parse_mode='Markdown')
                logging.info(
                    "Mute: User muted",
                    extra={
                        'chat_id': chat_id,
                        'chat_title': chat_title,
                        'user_id': user_to_mute_id,
                        'username': user_to_mute_username,
                        'details': f"Message: {reply_message.get('text', 'N/A')} - Timeout: {timeout // 3600} hours"
                    }
                )
            else:
                bot.sendMessage(chat_id,
                                f"[{user_to_mute_username}](tg://user?id={user_to_mute_id}) –≤–∂–µ –º–∞—î –º—É—Ç —É –≥—Ä—É–ø—ñ'{chat_title}', –Ω–µ–º–æ–∂–ª–∏–≤–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É.",
                                parse_mode='Markdown', reply_to_message_id=msg['message_id'])
        else:
            bot.sendMessage(chat_id,
                            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –π–æ–º—É —Ç–∞–π–º–∞—É—Ç.",
                            reply_to_message_id=msg['message_id'])
    else:
        bot.deleteMessage((chat_id, msg['message_id']))


def handle_unmute_command(bot, msg, chat_id, user_id):
    chat_title = get_chat_title(bot, chat_id)
    if is_admin(bot, chat_id, user_id):
        if 'reply_to_message' in msg:
            reply_message = msg['reply_to_message']
            user_to_unmute_id = reply_message['from']['id']

            if user_to_unmute_id == bot.getMe()['id']:
                bot.sendMessage(chat_id, "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–Ω—è—Ç–∏ –º—É—Ç –∑ –±–æ—Ç–∞!", reply_to_message_id=msg['message_id'])
                return
            if is_admin(bot, chat_id, user_to_unmute_id):
                bot.sendMessage(chat_id, "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–Ω—è—Ç–∏ –º—É—Ç –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
                                reply_to_message_id=msg['message_id'])
                return

            user_to_unmute_username = get_username(reply_message)
            restrict_info = bot.getChatMember(chat_id, user_to_unmute_id)

            if restrict_info['status'] not in ['member', 'administrator', 'creator']:
                bot.restrictChatMember(
                    chat_id, user_to_unmute_id,
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
                if user_to_unmute_id in muted_users:
                    del muted_users[user_to_unmute_id]  # –í–∏–¥–∞–ª—è—î–º–æ –∑ muted_users –ø—Ä–∏ —Ä–æ–∑–º—É—Ç—ñ
                bot.sendMessage(chat_id,
                                f"‚úÖ [{user_to_unmute_username}](tg://user?id={user_to_unmute_id}) –±—ñ–ª—å—à–µ –Ω–µ –º–∞—î –æ–±–º–µ–∂–µ–Ω—å!",
                                parse_mode='Markdown')
                violations = get_violations(user_to_unmute_id)
                if violations > 0:
                    decrement_violations(user_to_unmute_id)
                logging.info(
                    "Unmute: User unmuted",
                    extra={
                        'chat_id': chat_id,
                        'chat_title': chat_title,
                        'user_id': user_to_unmute_id,
                        'username': user_to_unmute_username,
                        'details': f"Message: {reply_message.get('text', 'N/A')}"
                    }
                )
            else:
                bot.sendMessage(chat_id, f"[{user_to_unmute_username}](tg://user?id={user_to_unmute_id}) –Ω–µ –º–∞—î –º—É—Ç–∞ —É '{chat_title}'!",
                                parse_mode='Markdown', reply_to_message_id=msg['message_id'])
        else:
            bot.sendMessage(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –∑–Ω—è—Ç–∏ –∑ –Ω—å–æ–≥–æ –º—É—Ç.",
                            reply_to_message_id=msg['message_id'])
    else:
        bot.deleteMessage((chat_id, msg['message_id']))


def handle_add_curse_word_command(bot, msg, chat_id, user_id):
    chat_title = get_chat_title(bot, chat_id)
    if is_admin(bot, chat_id, user_id):
        parts = msg.get('text', '').split(" ", 1)
        if len(parts) < 2:
            bot.sendMessage(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è.", reply_to_message_id=msg['message_id'])
            return

        word = parts[1].strip()
        curse_words = load_curse_words("curse_words.json")

        if word.lower() in curse_words:
            bot.sendMessage(chat_id, f"–°–ª–æ–≤–æ '{word}' –≤–∂–µ —î –≤ —Å–ø–∏—Å–∫—É –ª–∞–π–ª–∏–≤–∏—Ö —Å–ª—ñ–≤.",
                            reply_to_message_id=msg['message_id'])
            return

        result = add_curse_word(user_id, word)
        bot.sendMessage(chat_id, result, reply_to_message_id=msg['message_id'])
        logging.info(
            "Curse word added",
            extra={
                'chat_id': chat_id,
                'chat_title': chat_title,
                'user_id': user_id,
                'username': get_username(msg),
                'details': f"Word: {word}"
            }
        )
    else:
        bot.deleteMessage((chat_id, msg['message_id']))
        bot.sendMessage(chat_id, f"‚ùå –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç—É '{chat_title}'.", reply_to_message_id=msg['message_id'])


def handle_report_command(bot, msg, chat_id, user_id):
    chat_title = get_chat_title(bot, chat_id)
    if 'reply_to_message' in msg:
        reply_message = msg['reply_to_message']
        reported_user_id = reply_message['from']['id']
        reported_username = get_username(reply_message)
        reported_message_id = reply_message['message_id']

        if can_report(user_id):
            admins = bot.getChatAdministrators(chat_id)
            for admin in admins:
                admin_id = admin['user']['id']
                if not bot.getChatMember(chat_id, admin_id)['user']['is_bot']:
                    bot.forwardMessage(admin_id, chat_id, reported_message_id)
            bot.sendMessage(chat_id,
                            f"‚úÖ –†–µ–ø–æ—Ä—Ç –≤—ñ–¥ [{get_username(msg)}](tg://user?id={user_id}) –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç—É '{chat_title}'. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ [{reported_username}](tg://user?id={reported_user_id}) —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç—å—Å—è.",
                            parse_mode='Markdown', reply_to_message_id=msg['message_id'])
            logging.info(
                "Report: Message reported",
                extra={
                    'chat_id': chat_id,
                    'chat_title': chat_title,
                    'user_id': user_id,
                    'username': get_username(msg),
                    'details': f"Reported user: {reported_user_id}, Message: {reply_message.get('text', 'N/A')}"
                }
            )
        else:
            bot.sendMessage(chat_id, "‚ùå –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /report –Ω–µ —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 2 —Ö–≤–∏–ª–∏–Ω–∏.",
                            reply_to_message_id=msg['message_id'])
    else:
        bot.sendMessage(chat_id, "‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –Ω—å–æ–≥–æ.",
                        reply_to_message_id=msg['message_id'])


def handle_appeal_command(bot, msg, chat_id, user_id):
    username = get_username(msg)
    is_muted = is_user_muted(bot, chat_id, user_id) if chat_id else False
    appeal_text = msg.get('text', '').replace('/appeal', '').strip()
    appeal_message = f"üìù –ê–ø–µ–ª—è—Ü—ñ—è –≤—ñ–¥ [{username}](tg://user?id={user_id}): {appeal_text}"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É –≤ –∞–ø–µ–ª—è—Ü—ñ—ó
    if not appeal_text:
        bot.sendMessage(chat_id or user_id,
                        "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –≤–∞—à–æ—ó –∞–ø–µ–ª—è—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /appeal –Ø –Ω–µ –ø–æ—Ä—É—à—É–≤–∞–≤ –ø—Ä–∞–≤–∏–ª–∞).",
                        parse_mode='Markdown', reply_to_message_id=msg['message_id'] if chat_id else None)
        return

    # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–≤–µ—Ä–Ω–µ–Ω—å (—Ä–∞–∑ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω)
    current_time = time.time()
    if user_id in user_last_reports and (current_time - user_last_reports[user_id] < 600):
        bot.sendMessage(chat_id or user_id, "‚ùå –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –∞–ø–µ–ª—è—Ü—ñ—é –Ω–µ —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω.",
                        parse_mode='Markdown', reply_to_message_id=msg['message_id'] if chat_id else None)
        return

    if chat_id:  # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –∑ –≥—Ä—É–ø–∏
        chat_title = get_chat_title(bot, chat_id)
        if not is_muted:
            bot.sendMessage(chat_id,
                            f"‚ùå [{username}](tg://user?id={user_id}), —É –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º—É—Ç–∞ –≤ —á–∞—Ç—ñ '{chat_title}' –¥–ª—è –æ—Å–∫–∞—Ä–∂–µ–Ω–Ω—è.",
                            parse_mode='Markdown', reply_to_message_id=msg['message_id'])
            return

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–ø–µ–ª—è—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admins = bot.getChatAdministrators(chat_id)
        for admin in admins:
            admin_id = admin['user']['id']
            if not bot.getChatMember(chat_id, admin_id)['user']['is_bot']:
                try:
                    bot.sendMessage(admin_id, f"{appeal_message} (–ß–∞—Ç: {chat_title})", parse_mode='Markdown')
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–ø–µ–ª—è—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        bot.sendMessage(chat_id, f"‚úÖ [{username}](tg://user?id={user_id}), –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç—É '{chat_title}'.",
                        parse_mode='Markdown', reply_to_message_id=msg['message_id'])

        # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ª–∏—à–µ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        user_last_reports[user_id] = current_time

        logging.info(
            "Appeal: Appeal submitted from group",
            extra={
                'chat_id': chat_id,
                'chat_title': chat_title,
                'user_id': user_id,
                'username': username,
                'details': f"Appeal text: {appeal_text}"
            }
        )
    else:  # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É
        muted_chat_id = muted_users.get(user_id, {}).get('chat_id')
        if muted_chat_id and is_user_muted(bot, muted_chat_id, user_id):
            chat_title = get_chat_title(bot, muted_chat_id)
            admins = bot.getChatAdministrators(muted_chat_id)
            for admin in admins:
                admin_id = admin['user']['id']
                if not bot.getChatMember(muted_chat_id, admin_id)['user']['is_bot']:
                    try:
                        bot.sendMessage(admin_id, f"{appeal_message} (–ß–∞—Ç: {chat_title})", parse_mode='Markdown')
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–ø–µ–ª—è—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            bot.sendMessage(user_id, f"‚úÖ –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç—É '{chat_title}'.")

            # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ª–∏—à–µ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            user_last_reports[user_id] = current_time
        else:
            bot.sendMessage(user_id,
                            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —á–∞—Ç, –¥–µ –≤–∏ –º–∞—î—Ç–µ –º—É—Ç. –£—Ç–æ—á–Ω—ñ—Ç—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤—Ä—É—á–Ω—É –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑ –≥—Ä—É–ø–∏.")
            return

        logging.info(
            "Appeal: Appeal submitted from private",
            extra={
                'chat_id': muted_chat_id or 'Unknown',
                'chat_title': chat_title if muted_chat_id else 'Unknown',
                'user_id': user_id,
                'username': username,
                'details': f"Appeal text: {appeal_text}"
            }
        )